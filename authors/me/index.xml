<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhang Bu on DamonZhang🔥</title>
    <link>https://damon-zhangb.github.io/authors/me/</link>
    <description>Recent content in Zhang Bu on DamonZhang🔥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://github.com/Damon-Zhangb&#34;&gt;Damon.Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Mon, 08 Nov 2021 09:30:18 +0800</lastBuildDate><atom:link href="https://damon-zhangb.github.io/authors/me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ（1）</title>
      <link>https://damon-zhangb.github.io/posts/rabbitmq1/</link>
      <pubDate>Mon, 08 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rabbitmq1/</guid>
      <description>hello world 介绍 RabbitMQ 是一个消息代理：它接受和转发消息。你可以将其视为邮局：当你将要投递的邮件放入邮箱时，你可以确定信件承运人最终会将邮件递送给您的收件人。在这个比喻中，RabbitMQ 是一个邮箱、一个邮局和一个信件载体。
RabbitMQ 和邮局之间的主要区别在于它不处理信件内容，而是接受、存储和转发二进制数据 blob消息。
RabbitMQ 和一般的消息传递使用了一些行话：
  生产无非就是发送。发送消息的程序是生产者：
  队列是位于 RabbitMQ 中的邮箱的名称。尽管消息流经 RabbitMQ 和您的应用程序，但它们只能存储在队列中。甲队列仅由主机的存储器＆磁盘限制约束，它本质上是一个大的消息缓冲器。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这是我们表示队列的方式：
  消费与接收具有相似的含义。一个消费者是一个程序，主要是等待接收信息：
  请注意，生产者、消费者和代理不必驻留在同一主机上；实际上，在大多数应用程序中它们没有。应用程序也可以既是生产者又是消费者。
Hello World 在这一小节中，我们将用 Go 编写两个小程序；发送单个消息的生产者和接收消息并将其打印出来的消费者。
在下图中，“P”是我们的生产者，“C”是我们的消费者。中间的盒子是一个队列——RabbitMQ 代表消费者保留的消息缓冲区。
 Go RabbitMQ 客户端库 RabbitMQ 使用多种协议。本教程使用 AMQP 0-9-1，这是一种用于消息传递的开放式通用协议。RabbitMQ 有许多不同语言的客户端。我们将在本教程中使用 Go amqp 客户端。
首先，使用go get安装 amqp ：
go get github.com/streadway/amqp   现在我们已经安装了 amqp，我们可以编写一些代码。
发送 我们将调用我们的消息发布者（发送者）send.go和我们的消息消费者（接收者） receive.go。发布者将连接到 RabbitMQ，发送一条消息，然后退出。
在 send.go 中，我们需要先导入库:
package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/streadway/amqp&amp;quot; )  我们还需要一个辅助函数来检查每个 amqp 调用的返回值：</description>
    </item>
    
    <item>
      <title>RPC --ProtoBuf</title>
      <link>https://damon-zhangb.github.io/posts/rpc-protobuf/</link>
      <pubDate>Wed, 03 Nov 2021 10:40:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rpc-protobuf/</guid>
      <description>ProtoBuf序列化协议 简介 由于RPC远程调用涉及的函数可能非常之远，远到它们之间说着完全不同的语言，语言就成了两边的沟通障碍。而Protobuf因为支持多种不同的语言（甚至不支持的语言也可以扩展支持），其本身特性也非常方便描述服务的接口（也就是方法列表），因此非常适合作为RPC世界的接口交流语言。
Protocol Buffers（简称：ProtoBuf）是一种序列化数据结构的协议。对于透过管道(pipeline)或存储资料进行通信的程序开发上是很有用的。这个方法包含一个接口描述语言，描述一些数据结构，并提供程序工具根据这些描述产生代码，用于将这些数据结构产生或解析资料流。
序列化 **序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)**的过程。
例如XML、JSON、YAML等。
Protobuf支持很多语言，比如C++、C#、Dart、Go、Java、Python、Rust等，同时也是跨平台的，所以得到了广泛的应用。
proto3 一个简单的例子 首先让我们看一个简单的例子simple.proto:
syntax = &amp;quot;proto3&amp;quot;; message SearchRequest { string query = 1; int32 page_number = 2; int32 result_per_page = 3; }  第一行指定protobuf的版本，这里是以proto3格式定义。你还可以指定为proto2。如果没有指定，默认以proto2格式定义。
它定义了一个message类型: SearchRequest， 它包含三个字段query、page_number、result_per_page,它会被protoc编译成不同的编程语言的相应对象，比如Java中的class、Go中的struct等。
字段是以[ repeated ] type fieldName = fieldNumber [ fieldOptions ] ;格式定义的。这个例子是一个简单的例子，采用了type fieldName = fieldNumber格式定义的。
比如第一个字段query, 首先是它的类型string，其次是字段的名称，然后是等号=, 之后是字段的序号，然后是分号。
这是普通的字段定义，当然还有一些复杂的一些字段定义，比如Oneof、Map、Reserved、enum定义，下一节我们再详细讲。
运行编译器，指定源目录（应用程序的源代码所在的地方——如果您不提供值，则使用当前目录）、目标目录（您希望生成的代码去的地方；通常与$SRC_DIR相同）和.proto的路径。在这种情况下，您将调用：
protoc -I=$SRC_DIR --go_out=$DST_DIR $SRC_DIR/addressbook.proto  因为您想要Go代码，所以您使用--go_out选项——为其他受支持的语言提供了类似的选项。
生成的代码我们指定放在本地文件夹中(--go_out=.)。
生成的数据结构如下，它还包括一些辅助方法以及GetXXXX读取字段的方法:
type SearchRequest struct { Query string `protobuf:&amp;quot;bytes,1,opt,name=query,proto3&amp;quot; json:&amp;quot;query,omitempty&amp;quot;` PageNumber int32 `protobuf:&amp;quot;varint,2,opt,name=page_number,json=pageNumber,proto3&amp;quot; json:&amp;quot;page_number,omitempty&amp;quot;` ResultPerPage int32 `protobuf:&amp;quot;varint,3,opt,name=result_per_page,json=resultPerPage,proto3&amp;quot; json:&amp;quot;result_per_page,omitempty&amp;quot;` XXX_NoUnkeyedLiteral struct{} `json:&amp;quot;-&amp;quot;` XXX_unrecognized []byte `json:&amp;quot;-&amp;quot;` XXX_sizecache int32 `json:&amp;quot;-&amp;quot;` } func (m *SearchRequest) Reset() { *m = SearchRequest{} } func (m *SearchRequest) String() string { return proto.</description>
    </item>
    
    <item>
      <title>RPC --入门</title>
      <link>https://damon-zhangb.github.io/posts/rpc-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Nov 2021 10:40:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rpc-%E5%85%A5%E9%97%A8/</guid>
      <description>RPC远程过程调用 简介 远程过程调用（Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。
通俗地说就是RPC调用远处的一个函数。远处到底有多远呢？可能是同一个文件内的不同函数，也可能是同一个机器的另一个进程的函数，还可能是远在火星好奇号上面的某个秘密方法。
本章将讨论RPC的基本用法，如何针对不同场景设计自己的RPC服务。
理论 在一个典型 RPC 的使用场景中，包含了服务发现、负载、容错、网络传输、序列化等组件，其中“RPC 协议”就指明了程序如何进行网络传输和序列化。
图1-框架图 一个 RPC 的核心功能主要有 5 个部分组成，分别是：客户端、客户端 Stub、网络传输模块、服务端 Stub、服务端等。
图2-核心功能 下面分别介绍核心 RPC 框架的重要组成：  客户端(Client)：服务调用方。 客户端存根(Client Stub)：存放服务端地址信息，将客户端的请求参数数据信息打包成网络消息，再通过网络传输发送给服务端。 服务端存根(Server Stub)：接收客户端发送过来的请求消息并进行解包，然后再调用本地服务进行处理。 **服务端(**Server)：服务的真正提供者。 Network Service：底层传输，可以是 TCP 或 HTTP。  服务的调用过程为：  client调用client stub，这是一次本地过程调用 client stub将参数打包成一个消息，然后发送这个消息。打包过程也叫做 marshalling client所在的系统将消息发送给server server的的系统将收到的包传给server stub server stub解包得到参数。 解包也被称作 unmarshalling 最后server stub调用服务过程. 返回结果按照相反的步骤传给client  总结一下，RPC要解决的两个问题：  解决分布式系统中，服务之间的调用问题。 远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。  Hello World Go语言的RPC包的路径为net/rpc，也就是放在了net包目录下面。因此我们可以猜测该RPC包是建立在net包基础之上的。
我们先构造一个HelloService类型，其中的Hello方法用于实现打印功能：
type HelloService struct {} func (p *HelloService) Hello(request string, reply *string) error { *reply = &amp;quot;hello:&amp;quot; + request return nil }  其中Hello方法必须满足Go语言的RPC规则：方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法。</description>
    </item>
    
    <item>
      <title>RabbitMQ（2）</title>
      <link>https://damon-zhangb.github.io/posts/rabbitmq2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rabbitmq2/</guid>
      <description>发布/订阅 在上一篇中，我们搭建了一个工作队列，每个任务只分发给一个工作者（worker）。在本篇教程中，我们要做的跟之前完全不一样 —— 分发一个消息给多个消费者（consumers）。这种模式被称为**“发布／订阅”。**
为了描述这种模式，我们将会构建一个简单的日志系统。它包括两个程序——第一个程序负责发送日志消息，第二个程序负责获取消息并输出内容。
在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上。
最终，日志消息被广播给所有的接受者（receivers）。
交换机（Exchanges） 前面的教程中，我们发送消息到队列并从中取出消息。现在是时候介绍RabbitMQ中完整的消息模型了。
让我们简单的概括一下之前的教程：
 发布者（producer）是发布消息的应用程序。 队列（queue）用于消息存储的缓冲。 消费者（consumer）是接收消息的应用程序。  RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。
发布者（producer）只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。
有几个可供选择的交换机类型：direct, topic, headers和fanout。我们在这里主要说明最后一个 —— fanout。先创建一个fanout类型的交换机，命名为logs：
err = ch.ExchangeDeclare( &amp;quot;logs&amp;quot;, // name &amp;quot;fanout&amp;quot;, // type true, // durable false, // auto-deleted false, // internal false, // no-wait nil, // arguments )  fanout交换机很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。这正是我们的日志系统所需要的。
 交换器列表 rabbitmqctl能够列出服务器上所有的交换器：sudo rabbitmqctl list_exchanges 这个列表中有一些叫做amq.*的匿名交换器。这些都是默认创建的，不过这时候你还不需要使用他们。
匿名的交换器 前面的教程中我们对交换机一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(&amp;quot;&amp;quot;)的匿名交换机。 回想我们之前是如何发布一则消息：
 err = ch.Publish( &amp;quot;&amp;quot;, // exchange q.Name, // routing key false, // mandatory false, // immediate amqp.</description>
    </item>
    
  </channel>
</rss>
