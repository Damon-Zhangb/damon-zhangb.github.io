<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhang Bu on DamonZhang🔥</title>
    <link>https://damon-zhangb.github.io/authors/me/</link>
    <description>Recent content in Zhang Bu on DamonZhang🔥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://github.com/Damon-Zhangb&#34;&gt;Damon.Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Thu, 04 Nov 2021 09:30:18 +0800</lastBuildDate><atom:link href="https://damon-zhangb.github.io/authors/me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 每日一库之 cron</title>
      <link>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-cron/</link>
      <pubDate>Thu, 04 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-cron/</guid>
      <description>Go 每日一库之 cron 简介 cron一个用于管理定时任务的库，用 Go 实现 Linux 中crontab这个命令的效果。之前我们也介绍过一个类似的 Go 库——gron。gron代码小巧，用于学习是比较好的。但是它功能相对简单些，并且已经不维护了。如果有定时任务需求，还是建议使用cron。
HelloWorld 安装cron，目前最新稳定版本为 v3：
$ go get -u github.com/robfig/cron/v3  使用：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; &amp;quot;github.com/robfig/cron/v3&amp;quot; ) func main() { c := cron.New() c.AddFunc(&amp;quot;@every 1s&amp;quot;, func() { fmt.Println(&amp;quot;tick every 1 second&amp;quot;) }) c.Start() time.Sleep(time.Second * 5) }  使用非常简单，创建cron对象，这个对象用于管理定时任务。
调用cron对象的AddFunc()方法向管理器中添加定时任务。AddFunc()接受两个参数，参数 1 以字符串形式指定触发时间规则，参数 2 是一个无参的函数，每次触发时调用。@every 1s表示每秒触发一次，@every后加一个时间间隔，表示每隔多长时间触发一次。例如@every 1h表示每小时触发一次，@every 1m2s表示每隔 1 分 2 秒触发一次。time.ParseDuration()支持的格式都可以用在这里。
调用c.Start()启动定时循环。
注意一点，因为c.Start()启动一个新的 goroutine 做循环检测，我们在代码最后加了一行time.Sleep(time.Second * 5)防止主 goroutine 退出。
运行效果，每隔 1s 输出一行字符串：
$ go run main.</description>
    </item>
    
    <item>
      <title>Go 每日一库之 logrus</title>
      <link>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-logrus/</link>
      <pubDate>Thu, 04 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-logrus/</guid>
      <description>Go 每日一库之 logrus 简介 log库只提供了三组接口，功能过于简单了。 今天，我们来介绍一个日志库中的“明星库”——logrus。 logrus完全兼容标准的log库，还支持文本、JSON 两种日志输出格式。很多知名的开源项目都使用了这个库，如大名鼎鼎的 docker。
helloworld 第三方库需要先安装：
$ go get github.com/sirupsen/logrus  后使用：
package main import ( &amp;quot;github.com/sirupsen/logrus&amp;quot; ) func main() { logrus.SetLevel(logrus.TraceLevel) logrus.Trace(&amp;quot;trace msg&amp;quot;) logrus.Debug(&amp;quot;debug msg&amp;quot;) logrus.Info(&amp;quot;info msg&amp;quot;) logrus.Warn(&amp;quot;warn msg&amp;quot;) logrus.Error(&amp;quot;error msg&amp;quot;) logrus.Fatal(&amp;quot;fatal msg&amp;quot;) logrus.Panic(&amp;quot;panic msg&amp;quot;) }  logrus的使用非常简单，与标准库log类似。logrus支持更多的日志级别：
 Panic：记录日志，然后panic。 Fatal：致命错误，出现错误时程序无法正常运转。输出日志后，程序退出； Error：错误日志，需要查看原因； Warn：警告信息，提醒程序员注意； Info：关键操作，核心流程的日志； Debug：一般程序中输出的调试信息； Trace：很细粒度的信息，一般用不到；  日志级别从上向下依次增加，Trace最大，Panic最小。logrus有一个日志级别，高于这个级别的日志不会输出。 默认的级别为InfoLevel。所以为了能看到Trace和Debug日志，我们在main函数第一行设置日志级别为TraceLevel。
定制 输出文件名 调用logrus.SetReportCaller(true)设置在输出日志中添加文件名和方法信息：
package main import ( &amp;quot;github.com/sirupsen/logrus&amp;quot; ) func main() { logrus.SetReportCaller(true) logrus.Info(&amp;quot;info msg&amp;quot;) }  输出多了两个字段file为调用logrus相关方法的文件名，method为方法名：
$ go run main.</description>
    </item>
    
    <item>
      <title>RPC --gRPC</title>
      <link>https://damon-zhangb.github.io/posts/rpc-grpc/</link>
      <pubDate>Tue, 02 Nov 2021 10:40:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rpc-grpc/</guid>
      <description>gRpc grpc技术栈 Go语言的gRPC技术栈如图4-1所示：
图4-1 gRPC技术栈 最底层为TCP或Unix Socket协议，在此之上是HTTP/2协议的实现，然后在HTTP/2协议之上又构建了针对Go语言的gRPC核心库。应用程序通过gRPC插件生产的Stub代码和gRPC核心库通信，也可以直接和gRPC核心库通信。
gRPC入门 如果从Protobuf的角度看，gRPC只不过是一个针对service接口生成代码的生成器。现在我们将学习gRPC的用法。
创建hello.proto文件，定义HelloService接口：
syntax = &amp;quot;proto3&amp;quot;; package main; message String { string value = 1; } service HelloService { rpc Hello (String) returns (String); }  使用protoc-gen-go内置的gRPC插件生成gRPC代码：
$ protoc --go_out=plugins=grpc:. hello.proto  gRPC插件会为服务端和客户端生成不同的接口：
type HelloServiceServer interface { Hello(context.Context, *String) (*String, error) } type HelloServiceClient interface { Hello(context.Context, *String, ...grpc.CallOption) (*String, error) }  gRPC通过context.Context参数，为每个方法调用提供了上下文支持。客户端在调用方法的时候，可以通过可选的grpc.CallOption类型的参数提供额外的上下文信息。
基于服务端的HelloServiceServer接口可以重新实现HelloService服务：
type HelloServiceImpl struct{} func (p *HelloServiceImpl) Hello( ctx context.Context, args *String, ) (*String, error) { reply := &amp;amp;String{Value: &amp;quot;hello:&amp;quot; + args.</description>
    </item>
    
    <item>
      <title>RPC --ProtoBuf</title>
      <link>https://damon-zhangb.github.io/posts/rpc-protobuf/</link>
      <pubDate>Mon, 01 Nov 2021 10:40:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rpc-protobuf/</guid>
      <description>ProtoBuf序列化协议 简介 由于RPC远程调用涉及的函数可能非常之远，远到它们之间说着完全不同的语言，语言就成了两边的沟通障碍。而Protobuf因为支持多种不同的语言（甚至不支持的语言也可以扩展支持），其本身特性也非常方便描述服务的接口（也就是方法列表），因此非常适合作为RPC世界的接口交流语言。
Protocol Buffers（简称：ProtoBuf）是一种序列化数据结构的协议。对于透过管道(pipeline)或存储资料进行通信的程序开发上是很有用的。这个方法包含一个接口描述语言，描述一些数据结构，并提供程序工具根据这些描述产生代码，用于将这些数据结构产生或解析资料流。
序列化 **序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)**的过程。
例如XML、JSON、YAML等。
Protobuf支持很多语言，比如C++、C#、Dart、Go、Java、Python、Rust等，同时也是跨平台的，所以得到了广泛的应用。
proto3 一个简单的例子 首先让我们看一个简单的例子simple.proto:
syntax = &amp;quot;proto3&amp;quot;; message SearchRequest { string query = 1; int32 page_number = 2; int32 result_per_page = 3; }  第一行指定protobuf的版本，这里是以proto3格式定义。你还可以指定为proto2。如果没有指定，默认以proto2格式定义。
它定义了一个message类型: SearchRequest， 它包含三个字段query、page_number、result_per_page,它会被protoc编译成不同的编程语言的相应对象，比如Java中的class、Go中的struct等。
字段是以[ repeated ] type fieldName = fieldNumber [ fieldOptions ] ;格式定义的。这个例子是一个简单的例子，采用了type fieldName = fieldNumber格式定义的。
比如第一个字段query, 首先是它的类型string，其次是字段的名称，然后是等号=, 之后是字段的序号，然后是分号。
这是普通的字段定义，当然还有一些复杂的一些字段定义，比如Oneof、Map、Reserved、enum定义，下一节我们再详细讲。
运行编译器，指定源目录（应用程序的源代码所在的地方——如果您不提供值，则使用当前目录）、目标目录（您希望生成的代码去的地方；通常与$SRC_DIR相同）和.proto的路径。在这种情况下，您将调用：
protoc -I=$SRC_DIR --go_out=$DST_DIR $SRC_DIR/addressbook.proto  因为您想要Go代码，所以您使用--go_out选项——为其他受支持的语言提供了类似的选项。
生成的代码我们指定放在本地文件夹中(--go_out=.)。
生成的数据结构如下，它还包括一些辅助方法以及GetXXXX读取字段的方法:
type SearchRequest struct { Query string `protobuf:&amp;quot;bytes,1,opt,name=query,proto3&amp;quot; json:&amp;quot;query,omitempty&amp;quot;` PageNumber int32 `protobuf:&amp;quot;varint,2,opt,name=page_number,json=pageNumber,proto3&amp;quot; json:&amp;quot;page_number,omitempty&amp;quot;` ResultPerPage int32 `protobuf:&amp;quot;varint,3,opt,name=result_per_page,json=resultPerPage,proto3&amp;quot; json:&amp;quot;result_per_page,omitempty&amp;quot;` XXX_NoUnkeyedLiteral struct{} `json:&amp;quot;-&amp;quot;` XXX_unrecognized []byte `json:&amp;quot;-&amp;quot;` XXX_sizecache int32 `json:&amp;quot;-&amp;quot;` } func (m *SearchRequest) Reset() { *m = SearchRequest{} } func (m *SearchRequest) String() string { return proto.</description>
    </item>
    
    <item>
      <title>RPC --入门</title>
      <link>https://damon-zhangb.github.io/posts/rpc-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Nov 2021 10:40:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rpc-%E5%85%A5%E9%97%A8/</guid>
      <description>RPC远程过程调用 简介 远程过程调用（Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。
通俗地说就是RPC调用远处的一个函数。远处到底有多远呢？可能是同一个文件内的不同函数，也可能是同一个机器的另一个进程的函数，还可能是远在火星好奇号上面的某个秘密方法。
本章将讨论RPC的基本用法，如何针对不同场景设计自己的RPC服务。
理论 在一个典型 RPC 的使用场景中，包含了服务发现、负载、容错、网络传输、序列化等组件，其中“RPC 协议”就指明了程序如何进行网络传输和序列化。
图1-框架图 一个 RPC 的核心功能主要有 5 个部分组成，分别是：客户端、客户端 Stub、网络传输模块、服务端 Stub、服务端等。
图2-核心功能 下面分别介绍核心 RPC 框架的重要组成：  客户端(Client)：服务调用方。 客户端存根(Client Stub)：存放服务端地址信息，将客户端的请求参数数据信息打包成网络消息，再通过网络传输发送给服务端。 服务端存根(Server Stub)：接收客户端发送过来的请求消息并进行解包，然后再调用本地服务进行处理。 **服务端(**Server)：服务的真正提供者。 Network Service：底层传输，可以是 TCP 或 HTTP。  服务的调用过程为：  client调用client stub，这是一次本地过程调用 client stub将参数打包成一个消息，然后发送这个消息。打包过程也叫做 marshalling client所在的系统将消息发送给server server的的系统将收到的包传给server stub server stub解包得到参数。 解包也被称作 unmarshalling 最后server stub调用服务过程. 返回结果按照相反的步骤传给client  总结一下，RPC要解决的两个问题：  解决分布式系统中，服务之间的调用问题。 远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。  Hello World Go语言的RPC包的路径为net/rpc，也就是放在了net包目录下面。因此我们可以猜测该RPC包是建立在net包基础之上的。
我们先构造一个HelloService类型，其中的Hello方法用于实现打印功能：
type HelloService struct {} func (p *HelloService) Hello(request string, reply *string) error { *reply = &amp;quot;hello:&amp;quot; + request return nil }  其中Hello方法必须满足Go语言的RPC规则：方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法。</description>
    </item>
    
    <item>
      <title>Go 每日一库之 Gin</title>
      <link>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-gin/</link>
      <pubDate>Mon, 01 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-gin/</guid>
      <description>Go 每日一库之 Gin 1.简介  Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点 对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错 借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范  hello world package main import ( &amp;quot;net/http&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; ) func main() { // 1.创建路由 r := gin.Default() // 2.绑定路由规则，执行的函数 // gin.Context，封装了request和response r.GET(&amp;quot;/&amp;quot;, func(c *gin.Context) { c.String(http.StatusOK, &amp;quot;hello World!&amp;quot;) }) // 3.监听端口，默认在8080 // Run(&amp;quot;里面不指定端口号默认为8080&amp;quot;) r.Run(&amp;quot;:8000&amp;quot;) }  </description>
    </item>
    
  </channel>
</rss>
