<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息队列 on DamonZhang🔥</title>
    <link>https://damon-zhangb.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 消息队列 on DamonZhang🔥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://github.com/Damon-Zhangb&#34;&gt;Damon.Zhang&lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 09 Nov 2021 09:30:18 +0800</lastBuildDate><atom:link href="https://damon-zhangb.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RabbitMQ（2）</title>
      <link>https://damon-zhangb.github.io/posts/rabbitmq2/</link>
      <pubDate>Tue, 09 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rabbitmq2/</guid>
      <description>发布/订阅 在上一篇中，我们搭建了一个工作队列，每个任务只分发给一个工作者（worker）。在本篇教程中，我们要做的跟之前完全不一样 —— 分发一个消息给多个消费者（consumers）。这种模式被称为**“发布／订阅”。**
为了描述这种模式，我们将会构建一个简单的日志系统。它包括两个程序——第一个程序负责发送日志消息，第二个程序负责获取消息并输出内容。
在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上。
最终，日志消息被广播给所有的接受者（receivers）。
交换机（Exchanges） 前面的教程中，我们发送消息到队列并从中取出消息。现在是时候介绍RabbitMQ中完整的消息模型了。
让我们简单的概括一下之前的教程：
 发布者（producer）是发布消息的应用程序。 队列（queue）用于消息存储的缓冲。 消费者（consumer）是接收消息的应用程序。  RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。
发布者（producer）只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。
有几个可供选择的交换机类型：direct, topic, headers和fanout。我们在这里主要说明最后一个 —— fanout。先创建一个fanout类型的交换机，命名为logs：
err = ch.ExchangeDeclare( &amp;quot;logs&amp;quot;, // name &amp;quot;fanout&amp;quot;, // type true, // durable false, // auto-deleted false, // internal false, // no-wait nil, // arguments )  fanout交换机很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。这正是我们的日志系统所需要的。
 交换器列表 rabbitmqctl能够列出服务器上所有的交换器：sudo rabbitmqctl list_exchanges 这个列表中有一些叫做amq.*的匿名交换器。这些都是默认创建的，不过这时候你还不需要使用他们。
匿名的交换器 前面的教程中我们对交换机一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(&amp;quot;&amp;quot;)的匿名交换机。 回想我们之前是如何发布一则消息：
 err = ch.Publish( &amp;quot;&amp;quot;, // exchange q.Name, // routing key false, // mandatory false, // immediate amqp.</description>
    </item>
    
    <item>
      <title>RabbitMQ（1）</title>
      <link>https://damon-zhangb.github.io/posts/rabbitmq1/</link>
      <pubDate>Mon, 08 Nov 2021 09:30:18 +0800</pubDate>
      
      <guid>https://damon-zhangb.github.io/posts/rabbitmq1/</guid>
      <description>hello world 介绍 RabbitMQ 是一个消息代理：它接受和转发消息。你可以将其视为邮局：当你将要投递的邮件放入邮箱时，你可以确定信件承运人最终会将邮件递送给您的收件人。在这个比喻中，RabbitMQ 是一个邮箱、一个邮局和一个信件载体。
RabbitMQ 和邮局之间的主要区别在于它不处理信件内容，而是接受、存储和转发二进制数据 blob消息。
RabbitMQ 和一般的消息传递使用了一些行话：
  生产无非就是发送。发送消息的程序是生产者：
  队列是位于 RabbitMQ 中的邮箱的名称。尽管消息流经 RabbitMQ 和您的应用程序，但它们只能存储在队列中。甲队列仅由主机的存储器＆磁盘限制约束，它本质上是一个大的消息缓冲器。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这是我们表示队列的方式：
  消费与接收具有相似的含义。一个消费者是一个程序，主要是等待接收信息：
  请注意，生产者、消费者和代理不必驻留在同一主机上；实际上，在大多数应用程序中它们没有。应用程序也可以既是生产者又是消费者。
Hello World 在这一小节中，我们将用 Go 编写两个小程序；发送单个消息的生产者和接收消息并将其打印出来的消费者。
在下图中，“P”是我们的生产者，“C”是我们的消费者。中间的盒子是一个队列——RabbitMQ 代表消费者保留的消息缓冲区。
 Go RabbitMQ 客户端库 RabbitMQ 使用多种协议。本教程使用 AMQP 0-9-1，这是一种用于消息传递的开放式通用协议。RabbitMQ 有许多不同语言的客户端。我们将在本教程中使用 Go amqp 客户端。
首先，使用go get安装 amqp ：
go get github.com/streadway/amqp   现在我们已经安装了 amqp，我们可以编写一些代码。
发送 我们将调用我们的消息发布者（发送者）send.go和我们的消息消费者（接收者） receive.go。发布者将连接到 RabbitMQ，发送一条消息，然后退出。
在 send.go 中，我们需要先导入库:
package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/streadway/amqp&amp;quot; )  我们还需要一个辅助函数来检查每个 amqp 调用的返回值：</description>
    </item>
    
  </channel>
</rss>
